/* * TCSS 342 */package structures;import exceptions.EmptyCollectionException;/** * A singly-linked implementation of the QueueADT. * * This Queue implementation allows null elements. *  * @author Alan Fowler - An adaptation of code from several textbooks * @version 1.2 *  * @param <T> the generic data type */public class LinkedQueue<T> implements QueueADT<T> {        /**     * The number of elements contained in the queue.     */    private int mySize;        /**     * A reference to the first node in the queue.     */    private LinearNode<T> myFront;        /**     * A reference to the last node in the queue.     */    private LinearNode<T> myRear;    /**     * Initialize an empty queue.     */    public LinkedQueue() {        mySize = 0;        myFront = null;        myRear = null;    }    @Override    public void enqueue(final T theElement) {        final LinearNode<T> node = new LinearNode<T>(theElement);        if (mySize == 0) {            myFront = node;        } else {            myRear.setNext(node);        }        myRear = node;        mySize++;    }    @Override    public T dequeue() throws EmptyCollectionException {        if (mySize == 0) {            throw new EmptyCollectionException("queue");        }        final T result = myFront.getElement();        myFront = myFront.getNext();        mySize--;                if (mySize == 0) {            myRear = null;        }        return result;    }    @Override    public T first() throws EmptyCollectionException {        // To be completed as a Programming Project        if (mySize == 0) {            throw new EmptyCollectionException("The queue is empty.");        }                return myFront.getElement();    }    @Override    public boolean isEmpty() {        // To be completed as a Programming Project        return mySize == 0;    }    @Override    public int size() {        // To be completed as a Programming Project                return mySize;    }    /**     * The returned String includes a comma separated listing of each element in the queue     * and includes a label for the front of the queue.     * This method will return an empty String if called on an empty queue.     *      * <p>For queue that is not empty the format of the returned String is:     * Front -> 8, 6, 7, 5, 3, 0, 9     */    @Override    public String toString() {        // To be completed as a Programming Project        final StringBuilder sb = new StringBuilder();        if (mySize == 0) {            sb.append("");        }        LinearNode<T> current = myFront;        for (int i = 0; i < mySize; i++) {            sb.append(current.getElement() + " ");            current = current.getNext();        }                            return sb.toString();    }}